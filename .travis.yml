language: cpp

sudo: required

branches:
  only:
    - master

matrix:
  include:
    - os: linux
      dist: trusty
      compiler: gcc
      env: PYTHON_VERSION=2.7
    - os: linux
      dist: trusty
      compiler: gcc
      env: PYTHON_VERSION=3.4
    - os: osx
      osx_image: xcode9.3beta
      compiler: clang
      env: PYTHON_VERSION=3.6
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: PYTHON_VERSION=2.7
    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env: PYTHON_VERSION=2.7
      env: COVERALLS=true

before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ];
    then
      brew update > /dev/null 2>&1;
      brew outdated cmake || brew upgrade cmake;
      brew install eigen;
      brew install tbb;
      if [ "$PYTHON_VERSION" == "3.6" ];
      then
        brew install nlopt --without-numpy;
        brew upgrade python;
        brew install gcc;
        brew link --overwrite gcc;
        brew install numpy;
        brew link --overwrite numpy;
      fi
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ];
    then
      wget -q https://cmake.org/files/v3.9/cmake-3.9.0-Linux-x86_64.tar.gz --no-check-certificate;
      tar -xzf cmake-3.9.0-Linux-x86_64.tar.gz;
      sudo ln -f -s ./cmake-3.9.0-Linux-x86_64/bin/cmake /usr/local/bin/cmake;
      sudo apt-get update -qq;
      sudo apt-get install -qq libboost-dev libboost-test-dev libtbb-dev;
      pip install --user --upgrade pip virtualenv;
      virtualenv -p python$PYTHON_VERSION venv;
      source venv/bin/activate;
      pip install numpy;
    fi

before_script:
  - cd $TRAVIS_BUILD_DIR
  - if [ "$TRAVIS_OS_NAME" == "osx" ];
    then
      if [ "$COVERALLS" == "true" ];
      then
        echo "CHECKING CODE COVERAGE, $COVERALLS";
        cmake -DWARNINGS_AS_ERRORS=ON -DCOVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON . -DUSE_SYSTEM_EIGEN=ON;
      elif [ "$PYTHON_VERSION" == "3.6" ];
      then
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_EXAMPLES=ON -DBUILD_TESTING=ON -DPYBIND11_PYTHON_VERSION=$PYTHON_VERSION -DUSE_SYSTEM_EIGEN=ON;
      else
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON -DPYBIND11_PYTHON_VERSION=$PYTHON_VERSION -DUSE_SYSTEM_EIGEN=ON;
      fi
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ];
    then
      cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON -DPYBIND11_PYTHON_VERSION=$PYTHON_VERSION;
    fi

script:
  - make -j 2;
  - if [ "$COVERALLS" == "true" ];
    then
      make coveralls -j 2;
    else
      ctest --output-on-failure -j 2;
    fi

notifications:
  email:
    on_success: change
    on_failure: always
