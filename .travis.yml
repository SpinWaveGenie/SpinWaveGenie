language: cpp

sudo: required

branches:
  only:
    - master
    - coverity_scan

matrix:
  include:
    - os: linux
      dist: trusty
      compiler: gcc
    - os: linux
      dist: trusty
      compiler: clang-3.8
      env: CLANG_STATIC_ANALYZER=true
    - os: linux
      dist: trusty
      compiler: clang-3.8
      env: CLANG_SANITIZERS=true
    - os: osx
      osx_image: xcode7.3
      compiler: clang
    - os: osx
      osx_image: xcode7.2
      compiler: clang
    - os: osx
      osx_image: xcode7.2
      compiler: clang
      env: COVERALLS=true
    
before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; 
    then 
      brew update > /dev/null 2>&1;
      brew tap homebrew/science;
      brew install --quite cmake;
      brew install --quiet eigen;
      brew install --quiet tbb --c++11;
      brew install --quiet nlopt;
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; 
    then 
      sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test;
      wget -O llvm.key http://llvm.org/apt/llvm-snapshot.gpg.key && sudo apt-key add llvm.key;
      sudo add-apt-repository -y 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.8 main';
      sudo apt-get update -qq;
      sudo apt-get install -qq libboost-dev libboost-test-dev libeigen3-dev libtbb-dev libstdc++-4.9-dev clang-3.8 clang-tidy-3.8;
      cmake --version;
    fi

before_script:
  - if [ "$COVERALLS" == "true" ]; 
    then
      echo "CHECKING CODE COVERAGE, $COVERALLS"; 
      cmake -DWARNINGS_AS_ERRORS=ON -DCOVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON .;
    elif [ "$CLANG_STATIC_ANALYZER" == "true" ];
    then
      echo "RUNNING CLANG STATIC ANALYZER, $CLANG_STATIC_ANALYZER";
      cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DWARNINGS_AS_ERRORS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DUSE_THREADS=OFF .;
    elif [ "$CLANG_SANITIZERS" == "true" ];
    then 
      echo "RUNNING CLANG ADDRESS and UNDEFINED BEHAVIOR SANITIZERS, $CLANG_SANITIZERS";
      cmake -DWARNINGS_AS_ERRORS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DUSE_THREADS=OFF -DWITH_SANITIZERS=ON .;
    else
      if [ "$TRAVIS_OS_NAME" == "osx" ];
      then
        echo "OSX RELEASE BUILD";
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON .; 
      else
        echo "LINUX RELEASE BUILD";
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON .;
      fi
    fi

script:
  - if [ "$CLANG_STATIC_ANALYZER" == "true" ];
    then
      SOURCE_FILES=`find . \( -name '*.cpp' \) -path './*'`;
      CHECKS="modernize-*,readability-simplify-boolean-expr,google-readability-casting";
      for file in $SOURCE_FILES; do
        echo Filename:$file;
        clang-tidy-3.8 -checks=$CHECKS -p . -header-filter='./*' $file;
      done
    else
      make -j 2;
    fi
  - if [ "$COVERALLS" == "true" ];
    then 
      make coveralls -j 2;
    else
      ctest --output-on-failure -j 2;
    fi
    
notifications:
  email:
    on_success: change
    on_failure: always
