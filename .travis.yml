language: cpp

matrix:
  include:
    - os: linux
      compiler: gcc
    - os: linux
      compiler: clang
      env: CLANG_STATIC_ANALYZER=true
      addons: {apt: {packages: [clang-3.4]}}
    - os: linux
      compiler: clang
      env: CLANG_SANITIZERS=true
      addons: {apt: {packages: [clang-3.4]}}
    - os: osx
      compiler: clang
    - os: osx
      compiler: clang
      env: COVERALLS=true
    
before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; 
    then 
      brew update > /dev/null 2>&1;
      brew tap homebrew/science;
      brew install --quiet eigen;
      brew install --quiet tbb --c++11;
      brew install --quiet nlopt;
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; 
    then 
      sudo add-apt-repository --yes ppa:smspillaz/cmake-3.0.2;
      sudo apt-get update -qq;
      sudo apt-get purge -qq cmake;
      sudo apt-get install -qq cmake;
      cmake --version;
    fi

before_script:
  - if [ "$CXX" == "g++" ]; 
    then
      export CC=gcc-4.8;
      export CXX=g++-4.8;
    fi
  - if [ "$COVERALLS" == "true" ]; 
    then
      echo "CHECKING CODE COVERAGE, $COVERALLS"; 
      cmake -DWARNINGS_AS_ERRORS=ON -DCOVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON .;
    elif [ "$CLANG_STATIC_ANALYZER" == "true" ];
    then
      echo "RUNNING CLANG STATIC ANALYZER, $CLANG_STATIC_ANALYZER";
      scan-build cmake -DWARNINGS_AS_ERRORS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DUSE_THREADS=OFF .;
    elif [ "$CLANG_SANITIZERS" == "true" ];
    then 
      echo "RUNNING CLANG ADDRESS and UNDEFINED BEHAVIOR SANITIZERS, $CLANG_SANITIZERS";
      cmake -DWARNINGS_AS_ERRORS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DUSE_THREADS=OFF -DWITH_SANITIZERS=ON .;
    else
      if [ "$TRAVIS_OS_NAME" == "osx" ];
      then
        echo "OSX RELEASE BUILD";
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON .; 
      else
        echo "LINUX RELEASE BUILD";
        cmake -DWARNINGS_AS_ERRORS=ON -DBUILD_TESTING=ON .;
      fi
    fi

script:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "clang++" ];
    then
      scan-build make;
    else
      make;
    fi
  - if [ "$COVERALLS" == "true" ];
    then 
      make coveralls;
    else
      ctest --output-on-failure; 
    fi
    
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libboost-dev
      - libboost-test-dev
      - libeigen3-dev
      - libtbb-dev
      - gcc-4.8 
      - g++-4.8 
      - libstdc++-4.8-dev

notifications:
  email:
    on_success: change
    on_failure: always
